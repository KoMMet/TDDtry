準備
Program.cs
	namespaceのみにする（クラスがない状態）

UnitTest1.cs
	UnitTest1クラスのみにする（中身のメソッドがない状態）

★手順[数字]となっている行を実行していく

手順
--１つめのredフェーズ開始

手順1		UnitTest1クラスにgoo_tai_thoki_p1_winメソッドを追加する
手順2		var j=new Janken();を書く
		→コンパイルエラーになる

手順3		Program.csにJankenクラスを追加する
手順4		空のメインメソッドを追加する
		→コンパイルエラーが消える

手順5		goo_tai_thoki_p1_winメソッドでvar res= j.poi("goo", "thoki");を追加する
		→コンパイルエラーになる

手順6		Jankenクラスにpoi(object o1,object o2){}メソッドを追加する
手順7		poiメソッドにreturn "";を追加する
手順8		goo_tai_thoki_p1_winメソッドにAssert.True(res == "p1");を追加する
手順9		テストを実行する
		→テストが失敗する

--１つめのredフェーズ終了
--１つめのgreenフェーズ開始

手順10	poiメソッドの戻り値を"p1"にする
手順11	テストを実行する
		→テストが通る

--１つめのgreenフェーズ終了
--１つめのrefactフェーズ開始

手順12	poiメソッドの引数をstringにする
手順13	テストを実行する
		→テストが通る

--１つめのrefactフェーズ終了
--２つめのredフェーズ開始

手順14	UnitTest1クラスにpaa_tai_goo_p1_winメソッドを追加する
手順15	中身はgoo_tai_thoki_p1_winメソッドをコピペする
手順16	j.poiの引数を"paa","goo"にする
手順17	テストを実行する
		→テストが通る

--２つめのredフェーズ終了　と同時にgreenフェーズ終了
--２つめのrefactフェーズ開始

手順18	var j = new Janken();をメンバーへ格上げする
手順19	テストを実行する
		→テストが通る

--２つめのrefactフェーズ終了
--３つめのredフェーズ開始

手順20	UnitTest1クラスにgoo_tai_paa_p2_winメソッドを追加する
手順21	中身はpaa_tai_goo_p1_winメソッドをコピペする
手順22	j.poiの引数を"goo","paa"にする
手順23	テストを実行する
		→テストが失敗する

--３つめのredフェーズ終了
--３つめのgreenフェーズ開始

手順24	poiメソッドに
			if(p1=="goo") return "p2"; else return "p1";
		を追加する
手順25	テストを実行する
		→１つめのテストが失敗する

手順26	poiメソッドのif条件をp1=="goo" && p2=="paa"にする
手順27	テストを実行する
		→すべてのテストが通る

--３つめのgreenフェーズ終了

------------------------------------------------------------------
ポイント
	手順19にて、poiメソッドの実装が明らかに足りないのにテストが通る
	→テストが足りてない
	→テストを追加する


以下を書き起こしただけ　すごく良い
droidkaigi 2019  https://www.youtube.com/watch?v=1eK_RBdqFMo
